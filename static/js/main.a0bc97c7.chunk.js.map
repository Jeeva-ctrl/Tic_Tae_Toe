{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","id","className","e","target","MyVerticallyCenteredModal","props","Modal","show","size","onHide","aria-labelledby","centered","Header","closeButton","Title","Body","text","Footer","Button","variant","reset","CalculateWinner","squares","lines","i","length","a","b","c","GameBoard","Game","setState","showPopUp","Array","fill","xIsNext","handleClick","state","slice","winner","this","includes","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0bc97c7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nfunction Square({ value, onClick, id }) {\n  return (\n    <button className=\"sqrbtn\" id={id} onClick={(e) => onClick(e.target.id)}>\n      {value}\n    </button>\n  );\n}\nfunction MyVerticallyCenteredModal(props) {\n  return (\n    <Modal\n      show={props.show}\n      size=\"lg\"\n      onHide={props.onHide}\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Match Completed\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <h4>{props.text}</h4>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={props.reset}>\n          Reset\n        </Button>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nfunction CalculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nfunction GameBoard({ squares, onClick }) {\n  return (\n    <div className=\"board_container\">\n      <div>\n        <div>{<Square value={squares[0]} id={0} onClick={onClick} />}</div>\n        <div>{<Square value={squares[1]} id={1} onClick={onClick} />}</div>\n        <div>{<Square value={squares[2]} id={2} onClick={onClick} />}</div>\n      </div>\n      <div>\n        <div>{<Square value={squares[3]} id={3} onClick={onClick} />}</div>\n        <div>{<Square value={squares[4]} id={4} onClick={onClick} />}</div>\n        <div>{<Square value={squares[5]} id={5} onClick={onClick} />}</div>\n      </div>\n      <div>\n        <div>{<Square value={squares[6]} id={6} onClick={onClick} />}</div>\n        <div>{<Square value={squares[7]} id={7} onClick={onClick} />}</div>\n        <div>{<Square value={squares[8]} id={8} onClick={onClick} />}</div>\n      </div>\n    </div>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(8).fill(null),\n      xIsNext: true,\n      showPopUp: true,\n    };\n  }\n  onHide = () => {\n    this.setState({ showPopUp: false });\n  };\n  reset = () => {\n    this.setState({\n      squares: Array(8).fill(null),\n      xIsNext: true,\n      showPopUp: true,\n    });\n  };\n  handleClick = (i) => {\n    var squares = this.state.squares.slice();\n    squares[i] = this.state.xIsNext ? \"ðŸ§”\" : \"ðŸ‘®\";\n    let winner = CalculateWinner(this.state.squares);\n    if (winner) {\n      return;\n    }\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  };\n\n  render() {\n    let winner = CalculateWinner(this.state.squares);\n    return (\n      <div  className=\"container\">\n        <h2>TicðŸ§”TacðŸ‘®Toe</h2>\n        <p>Player 1 : ðŸ§”</p>\n        <p>Player 2 : ðŸ‘®</p>\n        <Button  variant=\"danger\" className=\"rstbtn\" onClick={this.reset}>Reset</Button>\n        <GameBoard squares={this.state.squares} onClick={this.handleClick} />\n        {this.state.squares.includes(null) ? (\n          \"\"\n        ) : (\n          <MyVerticallyCenteredModal\n            reset={this.reset}\n            onHide={() => this.onHide()}\n            show={this.state.showPopUp}\n            text={\"Match Drawn\"}\n          />\n        )}\n        <div>\n          {winner && this.state.showPopUp ? (\n            <MyVerticallyCenteredModal\n              reset={this.reset}\n              onHide={() => this.onHide()}\n              show={winner && this.state.showPopUp}\n              text={\"The winner is  \" + winner}\n            />\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}